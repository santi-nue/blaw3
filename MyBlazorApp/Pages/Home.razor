@page "/"
@using System.Text.Json
@using System.Text.Json.Nodes
@inject HttpClient Http

<h3>JSON Reader</h3>
<ul style="height: 500px; overflow-y: scroll;">
    @foreach (var element in elements)
    {
        <li>@element</li>
    }
</ul>

@code {
    private List<string> elements = new List<string>();
    private List<JsonElement> jsonArray;
    private PeriodicTimer timer;
    private int currentIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        // Fetch the JSON data from the file
        string jsonData = await Http.GetStringAsync("responses.json");

        // Parse the JSON data
        jsonArray = JsonSerializer.Deserialize<List<JsonElement>>(jsonData);

        timer = new PeriodicTimer(TimeSpan.FromSeconds(1));

        while (await timer.WaitForNextTickAsync())
        {
            if (currentIndex < jsonArray.Count)
            {
                //var jsonObject = jsonArray[currentIndex];
                //elements.Add(JsonSerializer.Serialize(jsonObject, new JsonSerializerOptions { WriteIndented = true }));



                JsonNode element = JsonNode.Parse(jsonArray[currentIndex].ToString()) ;


                //var element = jsonArray[currentIndex];
                JsonArray staArray = element["states"].AsArray();
                // Console.WriteLine($"Element {index + 1}:");
               elements.Clear() ;
                foreach ( JsonNode staElement in staArray)
                {
                 // elements.Add(string.Join(", ", staElement)) ;
                  elements.Add(string.Join("\t", staElement[5],staElement[6],staElement[7])  ) ;
                } 
                currentIndex++;
                InvokeAsync(StateHasChanged);
            }
            else
            {
                timer.Dispose();
                break;
            }
        }
    }
}







